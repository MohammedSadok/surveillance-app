generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String  @db.VarChar(100)
  providerAccountId String  @db.VarChar(100)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String   @db.VarChar(100)
  token   String   @unique @db.VarChar(100)
  expires DateTime

  @@unique([email, token])
}

model SessionExam {
  id        Int      @id @default(autoincrement())
  type      String
  startDate DateTime @db.Date()
  endDate   DateTime @db.Date()
  day       Day[]
}

model Day {
  id            Int         @id @default(autoincrement())
  date          DateTime    @db.Date()
  sessionExam   SessionExam @relation(fields: [sessionExamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionExamId Int
  timeSlot      TimeSlot[]
}

model TimeSlot {
  id        Int    @id @default(autoincrement())
  startTime String
  endTime   String
  dayId     Int
  day       Day    @relation(fields: [dayId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Exam      Exam[]
}

model Department {
  id       Int       @id @default(autoincrement())
  name     String
  Teachers Teacher[]
}

model Exam {
  id                    Int    @id @default(autoincrement())
  moduleName            String
  options               String
  enrolledStudentsCount Int

  timeSlotId        Int
  responsibleId     Int
  moduleResponsible Teacher      @relation(fields: [responsibleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  TimeSlot          TimeSlot     @relation(fields: [timeSlotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Monitoring        Monitoring[]
}

model Teacher {
  id              Int              @id @default(autoincrement())
  lastName        String
  firstName       String
  phoneNumber     String
  email           String
  departmentId    Int
  department      Department       @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monitoringLines MonitoringLine[]
  Exam            Exam[]
}

model Monitoring {
  id              Int              @id @default(autoincrement())
  exam            Exam             @relation(fields: [examId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  examId          Int
  location        Location?        @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId      Int?
  monitoringLines MonitoringLine[]
}

model MonitoringLine {
  id           Int        @id @default(autoincrement())
  teacherId    Int
  teacher      Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monitoringId Int
  monitoring   Monitoring @relation(fields: [monitoringId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String
  size       Int
  Monitoring Monitoring[]
}
